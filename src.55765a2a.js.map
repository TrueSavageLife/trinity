{"version":3,"sources":["src/index.js"],"names":["play","document","querySelector","trinity","active","trinsound","Howl","src","loop","html5","doorssound","animate","canvas","width","window","innerWidth","height","innerHeight","getContext","roundMove","move","d","length","ratio","radius","i","result","data","x","xs","y","ys","Math","random","ctx","lineWidth","lineCap","nodes","mouseX","mouseY","u","round","M","c","push","l","color","setInterval","clearRect","strokeStyle","beginPath","moveTo","lineTo","stroke","addEventListener","e","style","display","classList","add"],"mappings":";AAAA,IAAIA,EAAOC,SAASC,cAAc,SAC9BC,EAAUF,SAASC,cAAc,YACjCE,GAAS,EAETC,EAAY,IAAIC,KAAK,CACvBC,IAAK,CAAC,eACNC,MAAM,EACNC,OAAO,IAGLC,EAAa,IAAIJ,KAAK,CACxBC,IAAK,CAAC,aACNC,MAAM,EACNC,OAAO,IAeT,SAASE,IACHC,IAAAA,EAASX,SAASC,cAAc,WAChCU,GAAAA,EAAOC,MAAQC,OAAOC,WAAYH,EAAOI,OAASF,OAAOG,YAAaL,EAAOM,WAAY,CAIvFC,IAkBAC,EAAO,aACHC,IAAM,MAAQC,GAAU,MACvBA,GAAkB,KAAO,IAC5BA,GAAkB,IAGpBC,EAAQC,EAASF,GAIZG,IADHA,IAAAA,EAAI,EACDA,EAAIC,EAAOJ,OAAQG,IAAK,CACzBE,IAAAA,EAAOD,EAAOD,GAClBE,EAAKC,GAAKD,EAAKE,GACfF,EAAKG,GAAKH,EAAKI,IACXJ,EAAKC,EAAI,GAAKD,EAAKG,EAAI,GAAKH,EAAKC,EAAIf,GAASc,EAAKG,EAAId,KAEzDW,EAAKC,EAAIf,EAAQ,EAAImB,KAAKC,SAAWT,EAASA,EAAS,EAEvDG,EAAKG,EAAId,EAAS,EAAIgB,KAAKC,SAAWT,EAASA,EAAS,EAExDG,EAAKE,IAAMF,EAAKC,EAAIf,EAAQ,GAAKU,EAEjCI,EAAKI,IAAMJ,EAAKG,EAAId,EAAS,GAAKO,KAIpCW,EAAMtB,EAAOM,WAAW,MAExBL,EAAQD,EAAOC,MAEfG,EAASJ,EAAOI,OAEpBkB,EAAIC,UAAY,EAEhBD,EAAIE,QAAU,QAePN,IAbHR,IAAAA,EAAS,EAETD,EAAI,EAEJG,EAAS,IAETD,EAAQC,EAASF,EAEjBe,EAAQ,GAIRP,EAAI,EACDA,EAHQ,KAGMA,IAAK,CAEpBQ,IAAAA,EAASzB,EAAQ,EAAImB,KAAKC,SAAWT,EAASA,EAAS,EAEvDe,EAASvB,EAAS,EAAIgB,KAAKC,SAAWT,EAASA,EAAS,EAExDgB,EAAIR,KAAKS,MAAM,IAAMT,KAAKC,UAE1BS,EAAIV,KAAKS,MAAM,IAAMT,KAAKC,UAE1BU,EAAIX,KAAKS,MAAM,IAAMT,KAAKC,UAC9BI,EAAMO,KAAK,CACThB,EAAIU,EACJR,EAAIS,EACJV,IAAMS,EAASzB,EAAQ,GAAKU,EAC5BQ,IAAMQ,EAASvB,EAAS,GAAKO,EAC7BsB,EAAI,EAAIb,KAAKC,SACba,MAAQ,OAASN,EAAI,IAAME,EAAI,IAAMC,EAAI,MAOtClB,IAHHC,IAAAA,EAAS,GAETD,EAAI,EACDA,EA3BQ,KA2BMA,IACnBC,EAAOD,GAAKY,EAAMZ,GAEpBsB,YA9FgB,WACdb,EAAIc,UAAU,EAAG,EAAGnC,EAAOG,GAGpBS,IADHA,IAAAA,EAAI,EACDA,EAAIC,EAAOJ,OAAQG,IAAK,CACzBE,IAAAA,EAAOD,EAAOD,GAElBS,EAAIe,YAAc,oBAAsBtB,EAAKkB,EAAI,GAAK,IACtDX,EAAIgB,YACJhB,EAAIiB,OAAOxB,EAAKC,EAAGD,EAAKG,GACxBI,EAAIkB,OAAOzB,EAAKC,EAAID,EAAKkB,EAAIlB,EAAKE,GAAIF,EAAKG,EAAIH,EAAKkB,EAAIlB,EAAKI,IAC7DG,EAAImB,SAENjC,KAiFqB,KA/G3BpB,EAAKsD,iBAAiB,QAAS,SAAUC,GAClCnD,IACHA,GAAS,EACTC,EAAUL,OACVU,EAAWV,OACXA,EAAKwD,MAAMC,QAAU,OACrBtD,EAAQuD,UAAUC,IAAI,WACtBhD","file":"src.55765a2a.js","sourceRoot":"..","sourcesContent":["var play = document.querySelector('.play')\nvar trinity = document.querySelector('.trinity')\nvar active = false\n\nvar trinsound = new Howl({\n  src: ['trinity.mp3'],\n  loop: true,\n  html5: true\n})\n\nvar doorssound = new Howl({\n  src: ['doors.ogg'],\n  loop: true,\n  html5: true\n})\n\n\nplay.addEventListener('click', function (e) {\n  if (!active) {\n    active = true\n    trinsound.play()\n    doorssound.play()\n    play.style.display = 'none'\n    trinity.classList.add('animate')\n    animate();\n  }\n})\n/** @type {(Element|null)} */\nfunction animate() {\n  var canvas = document.querySelector(\"#canvas\");\n  if (canvas.width = window.innerWidth, canvas.height = window.innerHeight, canvas.getContext) {\n    /**\n     * @return {undefined}\n     */\n    var roundMove = function() {\n      ctx.clearRect(0, 0, width, height);\n      /** @type {number} */\n      var i = 0;\n      for (; i < result.length; i++) {\n        var data = result[i];\n        /** @type {string} */\n        ctx.strokeStyle = \"rgba(255,255,255,\" + data.l / 20 + \")\";\n        ctx.beginPath();\n        ctx.moveTo(data.x, data.y);\n        ctx.lineTo(data.x + data.l * data.xs, data.y + data.l * data.ys);\n        ctx.stroke();\n      }\n      move();\n    };\n    /**\n     * @return {undefined}\n     */\n    var move = function() {\n      if (!(d++ % 100) && length <= 60) {\n        if ((length = length + .05) > 2) {\n          length = length + .5;\n        }\n        /** @type {number} */\n        ratio = radius / length;\n      }\n      /** @type {number} */\n      var i = 0;\n      for (; i < result.length; i++) {\n        var data = result[i];\n        data.x += data.xs;\n        data.y += data.ys;\n        if (data.x < 0 || data.y < 0 || data.x > width || data.y > height) {\n          /** @type {number} */\n          data.x = width / 2 + Math.random() * radius - radius / 2;\n          /** @type {number} */\n          data.y = height / 2 + Math.random() * radius - radius / 2;\n          /** @type {number} */\n          data.xs = (data.x - width / 2) / ratio;\n          /** @type {number} */\n          data.ys = (data.y - height / 2) / ratio;\n        }\n      }\n    };\n    var ctx = canvas.getContext(\"2d\");\n    /** @type {number} */\n    var width = canvas.width;\n    /** @type {number} */\n    var height = canvas.height;\n    /** @type {number} */\n    ctx.lineWidth = 2;\n    /** @type {string} */\n    ctx.lineCap = \"round\";\n    /** @type {number} */\n    var length = 1;\n    /** @type {number} */\n    var d = 0;\n    /** @type {number} */\n    var radius = 300;\n    /** @type {number} */\n    var ratio = radius / length;\n    /** @type {!Array} */\n    var nodes = [];\n    /** @type {number} */\n    var itemsQty = 1200;\n    /** @type {number} */\n    var y = 0;\n    for (; y < itemsQty; y++) {\n      /** @type {number} */\n      var mouseX = width / 2 + Math.random() * radius - radius / 2;\n      /** @type {number} */\n      var mouseY = height / 2 + Math.random() * radius - radius / 2;\n      /** @type {number} */\n      var u = Math.round(255 * Math.random());\n      /** @type {number} */\n      var M = Math.round(255 * Math.random());\n      /** @type {number} */\n      var c = Math.round(255 * Math.random());\n      nodes.push({\n        x : mouseX,\n        y : mouseY,\n        xs : (mouseX - width / 2) / ratio,\n        ys : (mouseY - height / 2) / ratio,\n        l : 5 * Math.random(),\n        color : \"rgb(\" + u + \",\" + M + \",\" + c + \")\"\n      });\n    }\n    /** @type {!Array} */\n    var result = [];\n    /** @type {number} */\n    var i = 0;\n    for (; i < itemsQty; i++) {\n      result[i] = nodes[i];\n    }\n    setInterval(roundMove, 30);\n  }\n}\n"]}